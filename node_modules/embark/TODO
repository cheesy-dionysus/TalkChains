
============

V addFileToPipeline
V*is this working with css and other files????
V* test images
V** read file stream besides text content
V make sure to tolerate embark.json that don't have plugins
V fix specs
* make plugins work in Test
* make test work again


* plugin shouldn't crash the whole thing
* include what is the current environment
* auto seems to be limiting gas to 700k

============

* need to read file stream

idea:
* allow a embark app, to be published as a NPM package! for use in javascript


= supported plugins
* compiler
** viper plugin
** lll
* services
* extend embarkjs
* embarkjs provider
* blockchain client
* command line commands and arguments or extensions
* on test

* need to generate maps otherwise it's really hard to use this
* an error in contract deployment shouldn't continue the build process

* editing a html file (title) is not redeploying (might just be chrome)
* add redeploy command
* rebuild only the set of files necessary

embark command to generate abi file of a contract

plugin funcitonality to add
* option to always keep default behaviour
* extend deployment
* message bus (e.g tell embark to deploy something)
* detect adding plugins
* redux style chrome extension
** shows ethereum calls being made

//import "token2.sol";

//contract MyToken is Token(1000) {}
//contract MyToken is Token2(1000) {}

//contract MyToken is Token {
//
//  function MyToken(uint supply) Token(supply) {
//  }
//
//}

embark console

* run testrpc is no server is found
* need to check webserver for real
* support connecting through ipc

plugins:
* display cleaner messae when plugin is not available
* isolate plugin errors
* add some sort of API versioning
* don't allow plugins to crash app


embark plugin add

* add welcome to embark ascii
* need to speed up console/dashboard

test
* embark demo, file creation
* test template generator
* update dependencies
* create a set of test suites to test the different features

* create a testing protocol
** e.g create demo and new app
** check if main commands are all working

* getting error when creatin new dapp, it's possible the copy process is async

* detect running commands in a non-embark directory

* add gifs to documentation
* more graphics
* add ascii art to some commands

* detect is arguments given exceed or are less than expected in constructor

* get rid of grunt if possible

* follow instructions in docs
* add embark swarm for convenience

* communication layers
** stop listening to topics

* support quick ABI UI generation
** support react integration

* support exit as quit command also


* plugin options


better cmd line
* http://vorpal.js.org/
* http://stackoverflow.com/questions/34414603/how-to-integrate-node-module-vorpal-and-blessed

* ascii https://github.com/guo-yu/ascii

* tutorial how to do your own 'million dollar page'

* after rebuilding assets it should say ready

* add keybiding to 'focus' on console
* add welcome message and explanation that console is dragable

* add small ascii icons to the available services

* generate correct error for solidity errors
* so the backtrace of actual errors can still be printed

* display spinning animation when deploying

* api to check if there is a new version of embark available!
** check if there is any sort of connection
** check if the version number in a certain branch

* add a version method

* restablish connection to ethereum node should
** redeploy contracts
** warn in console

* add to: to whisper

* supported react

* save logs in .embark 

* checkGas cmd to console to check the gas costs for a contract
* include gas estimates in EmbarkJS
* display in logs with how much gas a contract was deployed


* support copying to a directory
 "*": ["app/html/*"],
 "html/*": ["app/html/*"],

* use solc loadRemoteVersion functionality

* do a test api for whisper and ipfs

* support es6, esx, etc..

* write plugins

https://github.com/ConsenSys/eth-lightwallet

* test contract import

* support a port option for embark run

* make dashboard optional



* support creating a boilerplate app in the same directory
** useful for migrations

* ga to find relationships between opcodes

* use development settings in simulator
* or add a simulator environment

* contract not redeploying when gas config changes

* save codeHash or code itself in the chains file
* save transactionHash in the chains file

* detect typical error messages and add explanations

* add a msg explaining the console window is scrollable

* try go guess gas values for contract deployments that have arguments

* https://jsfiddle.net/zkm1jy9y/

* include app name on package.json

* run console commands inside the embark console (e.g git)

* detect if environment is not known

* add solc to available services
* or a 'versions' command to list the stack

